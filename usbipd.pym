import tkinter as tk
import subprocess
import re
import ctypes
import sys

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

if not is_admin():
    ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, __file__, None, 1)
    sys.exit()

def get_usbipd_list():
    try:
        result = subprocess.run(["usbipd", "list"], capture_output=True, text=True, encoding='utf-8', check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        return f"Error executing usbipd list: {e}"
    except UnicodeDecodeError as e:
        return f"Unicode decode error: {e}"

def parse_usbipd_list(output):
    if not output:
        return [], []
    
    lines = output.splitlines()
    connected = []
    persisted = []
    in_connected = True
    
    for line in lines:
        if line.startswith("Persisted:"):
            in_connected = False
            continue
        if line.strip() == "" or line.startswith("Connected:") or line.startswith("usbipd:") or line.startswith("GUID"):
            continue
        
        if in_connected:
            if line.startswith("BUSID"):
                continue  # Ignore the header line under Connected:

            # Use regex to find VID:PID and STATE
            vid_pid_pattern = r'\b([0-9A-Fa-f]{4}:[0-9A-Fa-f]{4})\b'
            state_pattern = re.compile(r'(Not shared|Shared|Attached)')
            
            # Find VID:PID
            vid_pid_match = re.search(vid_pid_pattern, line)
            if not vid_pid_match:
                continue  # Skip if VID:PID is not found
            
            vid_pid = vid_pid_match.group(1)
            
            # Find STATE
            state_match = state_pattern.search(line)
            if not state_match:
                continue  # Skip if STATE is not found
            
            state = state_match.group(0)
            
            # Extract DEVICE info between VID:PID and STATE
            device_info = line[len(vid_pid_match.group(0)) + len(state_match.group(0)):].strip()
            device_info = line[line.index(vid_pid) + len(vid_pid):state_match.start()].strip()
            
            # Remove VID:PID from device_info
            device_info = device_info.replace(vid_pid, '').strip()
            
            connected.append((line.split()[0], vid_pid, device_info, state))
        else:
            persisted.append(line)
    
    return connected, persisted

def execute_command(command):
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        print(result.stdout)
        # Schedule the refresh after a delay
        root.after(250, refresh)
    except subprocess.CalledProcessError as e:
        print(f"Command failed: {e}")

def create_table(frame, devices):
    for widget in frame.winfo_children():
        widget.destroy()
        
    headers = ["BUSID", "VID:PID", "DEVICE", "STATE", "ACTIONS"]
    for col, header in enumerate(headers):
        if header == "ACTIONS":
            tk.Label(frame, text=header, borderwidth=2, relief='groove').grid(row=0, column=col, columnspan=4, sticky="nsew")
        else:
            tk.Label(frame, text=header, borderwidth=2, relief='groove').grid(row=0, column=col, sticky="nsew")
    
    for idx, (busid, vid_pid, dev_name, state) in enumerate(devices):
        tk.Label(frame, text=busid, borderwidth=2, relief='groove').grid(row=idx+1, column=0, sticky="nsew")
        tk.Label(frame, text=vid_pid, borderwidth=2, relief='groove').grid(row=idx+1, column=1, sticky="nsew")
        tk.Label(frame, text=dev_name, borderwidth=2, relief='groove').grid(row=idx+1, column=2, sticky="nsew")
        tk.Label(frame, text=state, borderwidth=2, relief='groove').grid(row=idx+1, column=3, sticky="nsew")

        tk.Button(frame, text="bind", command=lambda busid=busid: execute_command(["usbipd", "bind", "--busid", busid])).grid(row=idx+1, column=4, sticky="nsew")
        tk.Button(frame, text="attach", command=lambda busid=busid: execute_command(["usbipd", "attach", "--wsl", "--busid", busid])).grid(row=idx+1, column=5, sticky="nsew")
        tk.Button(frame, text="detach", command=lambda busid=busid: execute_command(["usbipd", "detach", "--busid", busid])).grid(row=idx+1, column=6, sticky="nsew")
        tk.Button(frame, text="unbind", command=lambda busid=busid: execute_command(["usbipd", "unbind", "--busid", busid])).grid(row=idx+1, column=7, sticky="nsew")

def refresh():
    output = get_usbipd_list()
    connected, persisted = parse_usbipd_list(output)
    create_table(connected_frame, connected)

# Create the main window
root = tk.Tk()
root.title("USB Devices")

# Create a frame for the connected devices
connected_frame = tk.Frame(root)
connected_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

# Add a label for connected devices
connected_label = tk.Label(connected_frame, text="Connected Devices:")
connected_label.grid(row=0, column=0, columnspan=8, sticky="w")

# Initialize the tables with data
refresh()

# 在主窗口中添加一个刷新按钮
refresh_button = tk.Button(root, text="Refresh", command=refresh)
refresh_button.pack(pady=5)

# 开始主循环
root.mainloop()